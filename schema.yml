openapi: 3.0.0
info:
  title: TikController
  description: Mikrotik backup and provision software API
  version: 0.1.0

paths:
  /router:
    post:
      tags: [Router]
      security:
        - bearerAuth: []
      summary: Move router under server's control
      description: "This method moves router under server's control.
      Account used to log into router will be renamed and password will be changed to stronger one. This will also create another account, which may be used to change router's settings.
      When the router is added, server will start monitoring logs and making backups. First backup will be created right after the router is moved under server's control."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ControlCredentials'
      responses:
        200:
          description: A JSON object with router information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Router"
        400:
          description: A JSON object with error information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags: [Router]
      security:
        - bearerAuth: []
      summary: List all routers
      description: Returns list of all registered routers
      responses:
        200:
          description: A JSON array with router information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Router"
    delete:
      tags: [Router]
      security:
        - bearerAuth: []
      summary: Stop controlling router
      description: Remover router from server's control. This renames router's admin account back to admin and generates new password for it.
      parameters:
        - name: id
          in: query
          description: Router ID
          schema:
            type: integer
      responses:
        200:
          description: A JSON object with router admin credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: admin
                    description: Admin's username
                  password:
                    type: string
                    example: password00__
                    description: Admin's password
        404:
          description: A JSON object with error information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /router/{id}:
    patch:
      tags: [Router]
      security:
        - bearerAuth: []
      summary: Update router description or IP address
      parameters:
        - name: id
          in: path
          description: Router ID
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: New description
                  example: Work router
                address:
                  type: string
                  format: ipv4
                  description: New IP address
                  example: 127.0.0.1
      responses:
        200:
          description: Empty response
        400:
          description: A JSON object with error information
  /router/backup/{id}:
    post:
      tags: [Backups]
      security:
        - bearerAuth: []
      summary: Force router backup
      description: Makes backup instantly
      parameters:
        - name: id
          in: path
          description: Router ID
          schema:
            type: integer
      responses:
        200:
          description: Empty response
    get:
      tags: [Backups]
      security:
        - bearerAuth: []
      summary: Returns all backups for this router
      parameters:
        - name: id
          in: path
          description: Router ID
          schema:
            type: integer
      responses:
        200:
          description: A JSON array of backups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Backup"
  /router/restore/{r_id}/{b_id}:
    post:
      tags: [Backups]
      security:
        - bearerAuth: []
      summary: Restores router backup
      parameters:
        - name: r_id
          in: path
          description: Router ID
          schema:
            type: integer
        - name: b_id
          in: path
          description: Backup ID
          schema:
            type: integer
      responses:
        200:
          description: Empty response
        404:
          description: A JSON object with error information
          content:
            applicaiton/json:
              schema:
                $ref: "#/components/schemas/Error"
  /router/{id}/logs:
    get:
      tags: [Logs]
      security:
        - bearerAuth: []
      summary: Get router's logs
      description: Requests logs from selected router
      parameters:
        - name: id
          in: path
          description: Router ID
          schema:
            type: integer
        - name: entries
          in: query
          description: Limit amount of log entries returned
          schema:
            type: integer
      responses:
        200:
          description: A JSON array of log entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogEntry"
        404:
          description: A JSON object with error information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /router/{id}/update:
    get:
      tags: [Updates]
      security:
        - bearerAuth: []
      summary: Checks for router updates
      parameters:
        - name: id
          in: path
          description: Router ID
          schema:
            type: integer
      responses:
        200:
          description: A JSON object with router current version, update availability and new version
          content:
            application/json:
              schema:
                type: object
                properties:
                  current:
                    type: string
                    description: Currect RouterOS version
                    example: "6.43.3"
                  update_available:
                    type: boolean
                    description: Availability of update
                    example: true
                  new:
                    type: string
                    description: New RouterOS version
                    example: "6.43.6"
    post:
      tags: [Updates]
      security:
        - bearerAuth: []
      summary: Performs an update if it is available
      parameters:
        - name: id
          in: path
          description: Router ID
          schema:
            type: integer
      responses:
        200:
          description: Empty response
        400:
          description: A JSON object with error information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"



components:
  schemas:
    ControlCredentials:
      type: object
      required:
        - address
        - username
        - password
      properties:
        address:
          type: string
          format: ipv4
          example: 127.0.0.1
          description: Router's address
        port:
          type: integer
          example: 6000
          description: RouterOS API port
        username:
          type: string
          example: admin
          description: Router's username
        password:
          type: string
          example: password00_
          description: Router's password
        description:
          type: string
          example: Home router
          description: Router's description
    Router:
      type: object
      required:
        - id
        - name
        - address
        - port
        - maintenance_username
        - maintenance_password
        - status
      properties:
        id:
          type: integer
          format: int64
          description: Router ID
          example: 3
        name:
          type: string
          format: ipv4
          description: Router name
          example: Home Router
        address:
          type: string
          description: Router IP address
          example: 127.0.0.1
        port:
          type: integer
          description: RouterOS API port
          example: 6000
        maintenance_username:
          type: string
          description: Maintenance username used to log into router
          example: service
        maintenance_password:
          type: string
          description: Maintenance password used to log into router
          example: passwd123_
        status:
          type: string
          description: Router's current status. Can be `ok`, `unavailable`, `suspicious activity`, `overload`
          example: ok
        problem_description:
          type: string
          description: If status is not `ok`, contains description of problem(s)
          example: CPU usage is too high
        backup_date:
          type: string
          format: date-time
          description: Last backup date
        software_version:
          type: string
          description: RouterOS version
          example: "6.43.2"
    Error:
      type: object
      description: Error information
      properties:
        error_code:
          type: string
          description: Code bound to an error
          example: NOT_FOUND
        description:
          type: string
          description: Human readable description
          example: Requested router is not found
    LogEntry:
      type: object
      description: Log entry
      properties:
        date:
          type: string
          format: date-time
          description: Date of entry
        severity:
          type: integer
          description: Severity of a message
        message:
          type: string
          description: Message in entry
    Backup:
      type: object
      description: Backup object
      properties:
        id:
          type: integer
          description: Backup ID
        date:
          type: string
          format: date-time
          description: Date of backup
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Authorization using bearer, generated on server's first launch